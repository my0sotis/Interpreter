// Manacherâ€™s Algorithm


  int N;
  scan(N);
//  if(N == 0)
//    return;

  int text[100];
  int k = 0;
  while(k < N){
    scan(text[k]);
    k = k + 1;
  }

  N = 2*N + 1; //Position count
  int L[N]; //LPS Length Array
  L[0] = 0;
  L[1] = 1;
  int C = 1; //centerPosition
  int R = 2; //centerRightPosition
  int i = 0; //currentRightPosition
  int iMirror; //currentLeftPosition
  int maxLPSLength = 0;
  int maxLPSCenterPosition = 0;
  int start = -1;
  int end = -1;
  int diff = -1;

  //Uncomment it to print LPS Length array
  //printf("%d %d ", L[0], L[1]);
    i = 2;
while(i < N)
    {
      //get currentLeftPosition iMirror for currentRightPosition i
      iMirror  = 2*C-i;
      L[i] = 0;
      diff = R - i;
      //If currentRightPosition i is within centerRightPosition R
      if(diff > 0){
        if(L[iMirror] > diff){
          L[i] = diff;}
        else {L[i] = L[iMirror];}
        }
      //Attempt to expand palindrome centered at currentRightPosition i
      //Here for odd positions, we compare characters and
      //if match then increment LPS Length by ONE
      //If even position, we just increment LPS by ONE without
      //any character comparison
      while ( ((i + L[i]) < N && (i - L[i]) > 0) &&
              ( ((i + L[i] + 1) - (i + L[i] + 1) / 2 * 2 == 0) ||
                (text[(i + L[i] + 1)/2] == text[(i - L[i] - 1)/2] )))
        {
          L[i] = L[i] +1;
        }

      if(L[i] > maxLPSLength)  // Track maxLPSLength
        {
          maxLPSLength = L[i];
          maxLPSCenterPosition = i;
        }

      //If palindrome centered at currentRightPosition i
      //expand beyond centerRightPosition R,
      //adjust centerPosition C based on expanded palindrome.
      if (i + L[i] > R)
        {
          C = i;
          R = i + L[i];
        }
      i = i + 1;
      //Uncomment it to print LPS Length array
      //debug for c    printf("%d ", L[i]);
    }
  //printf("\n");
  start = (maxLPSCenterPosition - maxLPSLength)/2;
  end = start + maxLPSLength - 1;
// printf("\n");
i = start;
while(i <= end){
  print(text[i]);
  i = i + 1;
 }
